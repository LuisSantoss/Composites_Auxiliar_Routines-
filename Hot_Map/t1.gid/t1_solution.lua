-------------------------------------------------------------
--  Numerical Solvers
-------------------------------------------------------------
NumericalSolver {
    id          = 'solver',
    typeName    = 'ArmadilloSolver',
    description = 'Direct matrix solver',
}

-------------------------------------------------------------
--  Physical Methods
-------------------------------------------------------------
PhysicalMethod {
    id       = 'MEC_PlaneStrain',
    typeName = 'MechanicalFemPhysics.PlaneStrain',
    type     = 'fem',
    mesh     = 'mesh',
    ruleSet  =  1,
    
    elementGroups      = {'Parts_Auto1_Quadrilateral', },
    materials          = {'elastic', },
    boundaryConditions = {'cload', 'disp'},
    properties         = {material = 'MEC_material' }
}

PhysicalMethod {
    id       = 'MEC_Interface',
    typeName = 'MechanicalFemPhysics.Interface',
    type     = 'fem',
    mesh     = 'mesh',
    ruleSet  =  1,
    
    elementGroups      = { 'cohesice_InterfaceLine', },
    materials          = { 'elasticInterface', },
    properties         = { material = 'MEC_material' }
}

-------------------------------------------------------------
--  Solver options
-------------------------------------------------------------
local solverOptions = {
    type                      = 'static nonlinear',
    tolerance                 = {mechanic = 1.000000e-05},
    stepsMax                  = 100,
    loadPredictorIncrement    = 0.100000,
    loadMaxIncrement          = 0.100000,
    loadMax                   = 1.000000,
    incrementsStrategy        = 'cylindrical arc length',
    iterationsStrategy        = 'cylindrical arc length',
    newtonRaphsonMode         = 'full',
    convergenceCriterion      = 'load',
    attemptsMax               = 5,
    iterationsMax             = 10,
    normalFlow                = 'false',
    loadAdjustStep            = 'false',
}

-------------------------------------------------------------
--  Process execution script
-------------------------------------------------------------

-- Load VTK library
dofile('$SCRIPTS/vtkLib.lua')

function ProcessScript()
    -- Create the solver model
    local solver = fem.init({'MEC_PlaneStrain', 'MEC_Interface'}, 'solver', solverOptions)
    os.execute('if not exist out mkdir out')
    local nsteps = solverOptions.stepsMax
    for i = 1, nsteps do
        print('---- time ' .. i)
        fem.step(solver,i)
        io.print('Calculated results:')
        vtkLib.saveMeshFile('mesh', {'u'}, {'S','E'}, nil, '$SIMULATIONDIR/out/$SIMULATIONNAME', {state = i, stateTime = i})
    end
end

-- Generated by GiD2GeMA v1.0.1 developer
